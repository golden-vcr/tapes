// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: sync.sql

package queries

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createSync = `-- name: CreateSync :exec
insert into tapes.sync (
    uuid,
    started_at
) values (
    $1,
    now()
)
`

func (q *Queries) CreateSync(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, createSync, argUuid)
	return err
}

const recordFailedSync = `-- name: RecordFailedSync :exec
update tapes.sync set
    finished_at = now(),
    error = $1::text
where
    sync.uuid = $2
    and finished_at is null
`

type RecordFailedSyncParams struct {
	Error string
	Uuid  uuid.UUID
}

func (q *Queries) RecordFailedSync(ctx context.Context, arg RecordFailedSyncParams) error {
	_, err := q.db.ExecContext(ctx, recordFailedSync, arg.Error, arg.Uuid)
	return err
}

const recordSuccessfulSync = `-- name: RecordSuccessfulSync :exec
update tapes.sync set
    finished_at = now(),
    num_tapes = $1::integer,
    warnings = $2::text
where
    sync.uuid = $3
    and finished_at is null
`

type RecordSuccessfulSyncParams struct {
	NumTapes int32
	Warnings string
	Uuid     uuid.UUID
}

func (q *Queries) RecordSuccessfulSync(ctx context.Context, arg RecordSuccessfulSyncParams) error {
	_, err := q.db.ExecContext(ctx, recordSuccessfulSync, arg.NumTapes, arg.Warnings, arg.Uuid)
	return err
}

const syncImage = `-- name: SyncImage :exec
insert into tapes.image (
    tape_id,
    index,
    color,
    width,
    height,
    rotated
) values (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
on conflict (tape_id, index) do update set
    color = excluded.color,
    width = excluded.width,
    height = excluded.height,
    rotated = excluded.rotated
`

type SyncImageParams struct {
	TapeID  int32
	Index   int32
	Color   string
	Width   int32
	Height  int32
	Rotated bool
}

func (q *Queries) SyncImage(ctx context.Context, arg SyncImageParams) error {
	_, err := q.db.ExecContext(ctx, syncImage,
		arg.TapeID,
		arg.Index,
		arg.Color,
		arg.Width,
		arg.Height,
		arg.Rotated,
	)
	return err
}

const syncTape = `-- name: SyncTape :exec
insert into tapes.tape (
    id,
    created_at,
    title,
    year,
    runtime
) values (
    $1,
    now(),
    $2,
    $3,
    $4
)
on conflict (id) do update set
    title = excluded.title,
    year = excluded.year,
    runtime = excluded.runtime
`

type SyncTapeParams struct {
	ID      int32
	Title   string
	Year    sql.NullInt32
	Runtime sql.NullInt32
}

func (q *Queries) SyncTape(ctx context.Context, arg SyncTapeParams) error {
	_, err := q.db.ExecContext(ctx, syncTape,
		arg.ID,
		arg.Title,
		arg.Year,
		arg.Runtime,
	)
	return err
}
