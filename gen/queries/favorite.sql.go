// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: favorite.sql

package queries

import (
	"context"
)

const getFavoriteTapes = `-- name: GetFavoriteTapes :many
select
    favorite.tape_id
from tapes.favorite
where favorite.twitch_user_id = $1
order by favorite.tape_id
`

func (q *Queries) GetFavoriteTapes(ctx context.Context, twitchUserID string) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, getFavoriteTapes, twitchUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var tape_id int32
		if err := rows.Scan(&tape_id); err != nil {
			return nil, err
		}
		items = append(items, tape_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerFavoriteTape = `-- name: RegisterFavoriteTape :exec
insert into tapes.favorite (
    twitch_user_id,
    tape_id
) values (
    $1,
    $2
)
on conflict (twitch_user_id, tape_id) do nothing
`

type RegisterFavoriteTapeParams struct {
	TwitchUserID string
	TapeID       int32
}

func (q *Queries) RegisterFavoriteTape(ctx context.Context, arg RegisterFavoriteTapeParams) error {
	_, err := q.db.ExecContext(ctx, registerFavoriteTape, arg.TwitchUserID, arg.TapeID)
	return err
}

const unregisterFavoriteTape = `-- name: UnregisterFavoriteTape :exec
delete from tapes.favorite
    where favorite.twitch_user_id = $1
    and favorite.tape_id = $2
`

type UnregisterFavoriteTapeParams struct {
	TwitchUserID string
	TapeID       int32
}

func (q *Queries) UnregisterFavoriteTape(ctx context.Context, arg UnregisterFavoriteTapeParams) error {
	_, err := q.db.ExecContext(ctx, unregisterFavoriteTape, arg.TwitchUserID, arg.TapeID)
	return err
}
